// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer, formDataBodySerializer } from '@hey-api/client-axios';
import type { HealthCheckError, HealthCheckResponse, CheckIfAdminExistsError, CheckIfAdminExistsResponse, RequestPasswordResetTokenData, RequestPasswordResetTokenError, RequestPasswordResetTokenResponse, ListGroupsData, ListGroupsError, ListGroupsResponse, CreateGroupData, CreateGroupError, CreateGroupResponse, GetGroupData, GetGroupError, GetGroupResponse, UpdateGroupData, UpdateGroupError, UpdateGroupResponse, PartiallyUpdateGroupData, PartiallyUpdateGroupError, PartiallyUpdateGroupResponse, DeleteGroupData, DeleteGroupError, DeleteGroupResponse, GetAuthTokensData, GetAuthTokensError, GetAuthTokensResponse, GetCurrentUserError, GetCurrentUserResponse, GetUserPermissionsError, GetUserPermissionsResponse, ListPermissionsData, ListPermissionsError, ListPermissionsResponse, RefreshAuthTokensData, RefreshAuthTokensError, RefreshAuthTokensResponse, RegisterUserData, RegisterUserError, RegisterUserResponse, ConfirmPasswordResetData, ConfirmPasswordResetError, ConfirmPasswordResetResponse, ValidatePasswordResetTokenData, ValidatePasswordResetTokenError, ValidatePasswordResetTokenResponse, SetupUserData, SetupUserError, SetupUserResponse, UpdateStaffProfileData, UpdateStaffProfileError, UpdateStaffProfileResponse, PartiallyUpdateStaffProfileData, PartiallyUpdateStaffProfileError, PartiallyUpdateStaffProfileResponse, GetMyStaffProfileError, GetMyStaffProfileResponse, UpdateMyStaffProfileData, UpdateMyStaffProfileError, UpdateMyStaffProfileResponse, PartiallyUpdateMyStaffProfileData, PartiallyUpdateMyStaffProfileError, PartiallyUpdateMyStaffProfileResponse, CreateStaffProfileData, CreateStaffProfileError, CreateStaffProfileResponse, ListUsersData, ListUsersError, ListUsersResponse, GetUserData, GetUserError, GetUserResponse, UpdateUserData, UpdateUserError, UpdateUserResponse, PartiallyUpdateUserData, PartiallyUpdateUserError, PartiallyUpdateUserResponse, ChangePasswordData, ChangePasswordError, ChangePasswordResponse, InviteStaffData, InviteStaffError, InviteStaffResponse, VerifyJwtTokensData, VerifyJwtTokensError, VerifyJwtTokensResponse, ListPostData, ListPostError, ListPostResponse, CreatePostData, CreatePostError, CreatePostResponse, RetrievePostData, RetrievePostError, RetrievePostResponse, UpdatePostData, UpdatePostError, UpdatePostResponse, ApiBlogPartialUpdateData, ApiBlogPartialUpdateError, ApiBlogPartialUpdateResponse, DeletePostData, DeletePostError, DeletePostResponse, ApiHrmLeaveRequestRetrieveData, ApiHrmLeaveRequestRetrieveError, ApiHrmLeaveRequestRetrieveResponse, UpdateLeaveReq2Data, UpdateLeaveReq2Error, UpdateLeaveReq2Response, UpdateLeaveReqData, UpdateLeaveReqError, UpdateLeaveReqResponse, UpdateLeaveStatus2Data, UpdateLeaveStatus2Error, UpdateLeaveStatus2Response, UpdateLeaveStatusData, UpdateLeaveStatusError, UpdateLeaveStatusResponse, ApiHrmLeaveRequestAllListData, ApiHrmLeaveRequestAllListError, ApiHrmLeaveRequestAllListResponse, CerateLeaveData, CerateLeaveError, CerateLeaveResponse, ListTasksData, ListTasksError, ListTasksResponse, CreateTaskData, CreateTaskError, CreateTaskResponse, RetrieveTaskData, RetrieveTaskError, RetrieveTaskResponse, UpdateTaskData, UpdateTaskError, UpdateTaskResponse, PartiallyUpdateTaskData, PartiallyUpdateTaskError, PartiallyUpdateTaskResponse, DeleteTaskData, DeleteTaskError, DeleteTaskResponse, ChangeTaskStatusData, ChangeTaskStatusError, ChangeTaskStatusResponse, ListMyTasksData, ListMyTasksError, ListMyTasksResponse, ListTimeEntriesData, ListTimeEntriesError, ListTimeEntriesResponse, ListMyTimeEntriesData, ListMyTimeEntriesError, ListMyTimeEntriesResponse, LogTimeEntryData, LogTimeEntryError, LogTimeEntryResponse, ListWorkSchedulesData, ListWorkSchedulesError, ListWorkSchedulesResponse, CreateWorkScheduleData, CreateWorkScheduleError, CreateWorkScheduleResponse, UpdateWorkScheduleData, UpdateWorkScheduleError, UpdateWorkScheduleResponse, PartiallyUpdateWorkScheduleData, PartiallyUpdateWorkScheduleError, PartiallyUpdateWorkScheduleResponse, ListMyWorkScheduleData, ListMyWorkScheduleError, ListMyWorkScheduleResponse, ListImageData, ListImageError, ListImageResponse, CreateImageData, CreateImageError, CreateImageResponse, RetrieveImageData, RetrieveImageError, RetrieveImageResponse, UpdateImageData, UpdateImageError, UpdateImageResponse, ApiImagesPartialUpdateData, ApiImagesPartialUpdateError, ApiImagesPartialUpdateResponse, DeleteImageData, DeleteImageError, DeleteImageResponse, ListBatchesData, ListBatchesError, ListBatchesResponse, CreateBatchesData, CreateBatchesError, CreateBatchesResponse, GetBatchesData, GetBatchesError, GetBatchesResponse, ApiInventoryBatchUpdateData, ApiInventoryBatchUpdateError, ApiInventoryBatchUpdateResponse, UpdateBatchesData, UpdateBatchesError, UpdateBatchesResponse, ApiInventoryBatchDestroyData, ApiInventoryBatchDestroyError, ApiInventoryBatchDestroyResponse, ApiInventoryBatchAttributeUpdateData, ApiInventoryBatchAttributeUpdateError, ApiInventoryBatchAttributeUpdateResponse, ApiInventoryBatchAttributePartialUpdateData, ApiInventoryBatchAttributePartialUpdateError, ApiInventoryBatchAttributePartialUpdateResponse, ApiInventoryBatchAttributeCreateData, ApiInventoryBatchAttributeCreateError, ApiInventoryBatchAttributeCreateResponse, ListProductsData, ListProductsError, ListProductsResponse, CreateProductData, CreateProductError, CreateProductResponse, ListProductTypeData, ListProductTypeError, ListProductTypeResponse, CreateProductTypeData, CreateProductTypeError, CreateProductTypeResponse, GetProductTypeData, GetProductTypeError, GetProductTypeResponse, ApiInventoryProductTypeUpdateData, ApiInventoryProductTypeUpdateError, ApiInventoryProductTypeUpdateResponse, UpdateProductTypeData, UpdateProductTypeError, UpdateProductTypeResponse, ApiInventoryProductTypeDestroyData, ApiInventoryProductTypeDestroyError, ApiInventoryProductTypeDestroyResponse, ApiInventoryProductTypeBatchAttributeRetrieveData, ApiInventoryProductTypeBatchAttributeRetrieveError, ApiInventoryProductTypeBatchAttributeRetrieveResponse, ApiInventoryProductTypeBatchAttributeUpdateData, ApiInventoryProductTypeBatchAttributeUpdateError, ApiInventoryProductTypeBatchAttributeUpdateResponse, ApiInventoryProductTypeBatchAttributePartialUpdateData, ApiInventoryProductTypeBatchAttributePartialUpdateError, ApiInventoryProductTypeBatchAttributePartialUpdateResponse, ApiInventoryProductTypeBatchAttributeDestroyData, ApiInventoryProductTypeBatchAttributeDestroyError, ApiInventoryProductTypeBatchAttributeDestroyResponse, ApiInventoryProductTypeBatchAttributeCreateData, ApiInventoryProductTypeBatchAttributeCreateError, ApiInventoryProductTypeBatchAttributeCreateResponse, GetProductData, GetProductError, GetProductResponse, ApiInventoryProductUpdateData, ApiInventoryProductUpdateError, ApiInventoryProductUpdateResponse, UpdateProductData, UpdateProductError, UpdateProductResponse, ApiInventoryProductDestroyData, ApiInventoryProductDestroyError, ApiInventoryProductDestroyResponse, ListSupplierData, ListSupplierError, ListSupplierResponse, CreateSupplierData, CreateSupplierError, CreateSupplierResponse, GetSupplierData, GetSupplierError, GetSupplierResponse, ApiInventorySupplierUpdateData, ApiInventorySupplierUpdateError, ApiInventorySupplierUpdateResponse, UpdateSupplierData, UpdateSupplierError, UpdateSupplierResponse, ApiInventorySupplierDestroyData, ApiInventorySupplierDestroyError, ApiInventorySupplierDestroyResponse } from './types.gen';

export const client = createClient(createConfig());

export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
    ...options,
    url: '/api/'
}); };

export const checkIfAdminExists = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<CheckIfAdminExistsResponse, CheckIfAdminExistsError, ThrowOnError>({
    ...options,
    url: '/api/auth/admin-exists/'
}); };

/**
 * Request password reset token
 * Requests a password reset token.
 */
export const requestPasswordResetToken = <ThrowOnError extends boolean = false>(options: Options<RequestPasswordResetTokenData, ThrowOnError>) => { return (options?.client ?? client).post<RequestPasswordResetTokenResponse, RequestPasswordResetTokenError, ThrowOnError>({
    ...options,
    url: '/api/auth/forgot-password/'
}); };

/**
 * List groups
 * Returns a list of all groups.
 */
export const listGroups = <ThrowOnError extends boolean = false>(options?: Options<ListGroupsData, ThrowOnError>) => { return (options?.client ?? client).get<ListGroupsResponse, ListGroupsError, ThrowOnError>({
    ...options,
    url: '/api/auth/groups/'
}); };

/**
 * Create group
 * Creates a new group.
 */
export const createGroup = <ThrowOnError extends boolean = false>(options: Options<CreateGroupData, ThrowOnError>) => { return (options?.client ?? client).post<CreateGroupResponse, CreateGroupError, ThrowOnError>({
    ...options,
    url: '/api/auth/groups/'
}); };

/**
 * Get group information
 * Returns the group's information.
 */
export const getGroup = <ThrowOnError extends boolean = false>(options: Options<GetGroupData, ThrowOnError>) => { return (options?.client ?? client).get<GetGroupResponse, GetGroupError, ThrowOnError>({
    ...options,
    url: '/api/auth/groups/{id}/'
}); };

/**
 * Update group information
 * Updates the group's information.
 */
export const updateGroup = <ThrowOnError extends boolean = false>(options: Options<UpdateGroupData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateGroupResponse, UpdateGroupError, ThrowOnError>({
    ...options,
    url: '/api/auth/groups/{id}/'
}); };

/**
 * Partially update group information
 * Partially updates the group's information.
 */
export const partiallyUpdateGroup = <ThrowOnError extends boolean = false>(options: Options<PartiallyUpdateGroupData, ThrowOnError>) => { return (options?.client ?? client).patch<PartiallyUpdateGroupResponse, PartiallyUpdateGroupError, ThrowOnError>({
    ...options,
    url: '/api/auth/groups/{id}/'
}); };

/**
 * Delete group
 * Deletes the group.
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteGroupResponse, DeleteGroupError, ThrowOnError>({
    ...options,
    url: '/api/auth/groups/{id}/'
}); };

/**
 * Get JWT tokens
 * Returns a pait of JWT tokens when valid credentials are provided.
 */
export const getAuthTokens = <ThrowOnError extends boolean = false>(options: Options<GetAuthTokensData, ThrowOnError>) => { return (options?.client ?? client).post<GetAuthTokensResponse, GetAuthTokensError, ThrowOnError>({
    ...options,
    url: '/api/auth/login/'
}); };

/**
 * Get current user information
 * Returns the current user's information.
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetCurrentUserResponse, GetCurrentUserError, ThrowOnError>({
    ...options,
    url: '/api/auth/me/'
}); };

/**
 * Get user permissions
 * Returns the current user's permissions.
 */
export const getUserPermissions = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetUserPermissionsResponse, GetUserPermissionsError, ThrowOnError>({
    ...options,
    url: '/api/auth/me/permissions/'
}); };

export const listPermissions = <ThrowOnError extends boolean = false>(options?: Options<ListPermissionsData, ThrowOnError>) => { return (options?.client ?? client).get<ListPermissionsResponse, ListPermissionsError, ThrowOnError>({
    ...options,
    url: '/api/auth/permissions/'
}); };

/**
 * Refresh JWT tokens
 * Returns a new pair of JWT tokens when valid refresh token is provided.
 */
export const refreshAuthTokens = <ThrowOnError extends boolean = false>(options: Options<RefreshAuthTokensData, ThrowOnError>) => { return (options?.client ?? client).post<RefreshAuthTokensResponse, RefreshAuthTokensError, ThrowOnError>({
    ...options,
    url: '/api/auth/refresh/'
}); };

/**
 * Register a new user.
 *
 * This endpoint creates a new user in the database, it doesn't require authentication.
 */
export const registerUser = <ThrowOnError extends boolean = false>(options: Options<RegisterUserData, ThrowOnError>) => { return (options?.client ?? client).post<RegisterUserResponse, RegisterUserError, ThrowOnError>({
    ...options,
    url: '/api/auth/register/'
}); };

/**
 * Confirm password reset
 * Confirms a password reset.
 */
export const confirmPasswordReset = <ThrowOnError extends boolean = false>(options: Options<ConfirmPasswordResetData, ThrowOnError>) => { return (options?.client ?? client).post<ConfirmPasswordResetResponse, ConfirmPasswordResetError, ThrowOnError>({
    ...options,
    url: '/api/auth/reset-password/'
}); };

/**
 * Validate password reset token
 * Validates a password reset token.
 */
export const validatePasswordResetToken = <ThrowOnError extends boolean = false>(options: Options<ValidatePasswordResetTokenData, ThrowOnError>) => { return (options?.client ?? client).post<ValidatePasswordResetTokenResponse, ValidatePasswordResetTokenError, ThrowOnError>({
    ...options,
    url: '/api/auth/reset-password/validate_token/'
}); };

export const setupUser = <ThrowOnError extends boolean = false>(options: Options<SetupUserData, ThrowOnError>) => { return (options?.client ?? client).post<SetupUserResponse, SetupUserError, ThrowOnError>({
    ...options,
    url: '/api/auth/setup-admin/'
}); };

/**
 * Update staff profile
 * Update staff profile by ID.
 *
 * Only staff users with the `accounts.change_staffprofile` or `accounts.change_account` permission can access this view.
 */
export const updateStaffProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateStaffProfileData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateStaffProfileResponse, UpdateStaffProfileError, ThrowOnError>({
    ...options,
    url: '/api/auth/staff_profile/{user_id}/'
}); };

/**
 * Partially update staff profile
 * Update staff profile by ID.
 *
 * Only staff users with the `accounts.change_staffprofile` or `accounts.change_account` permission can access this view.
 */
export const partiallyUpdateStaffProfile = <ThrowOnError extends boolean = false>(options: Options<PartiallyUpdateStaffProfileData, ThrowOnError>) => { return (options?.client ?? client).patch<PartiallyUpdateStaffProfileResponse, PartiallyUpdateStaffProfileError, ThrowOnError>({
    ...options,
    url: '/api/auth/staff_profile/{user_id}/'
}); };

/**
 * Get my staff profile
 * Returns the current user's staff profile.
 */
export const getMyStaffProfile = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetMyStaffProfileResponse, GetMyStaffProfileError, ThrowOnError>({
    ...options,
    url: '/api/auth/staff_profile/me/'
}); };

/**
 * Update my staff profile
 * Updates the current user's staff profile.
 */
export const updateMyStaffProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateMyStaffProfileData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateMyStaffProfileResponse, UpdateMyStaffProfileError, ThrowOnError>({
    ...options,
    url: '/api/auth/staff_profile/me/'
}); };

/**
 * Partially update my staff profile
 * Partially updates the current user's staff profile.
 */
export const partiallyUpdateMyStaffProfile = <ThrowOnError extends boolean = false>(options?: Options<PartiallyUpdateMyStaffProfileData, ThrowOnError>) => { return (options?.client ?? client).patch<PartiallyUpdateMyStaffProfileResponse, PartiallyUpdateMyStaffProfileError, ThrowOnError>({
    ...options,
    url: '/api/auth/staff_profile/me/'
}); };

/**
 * Create a new staff profile for the current user.
 */
export const createStaffProfile = <ThrowOnError extends boolean = false>(options: Options<CreateStaffProfileData, ThrowOnError>) => { return (options?.client ?? client).post<CreateStaffProfileResponse, CreateStaffProfileError, ThrowOnError>({
    ...options,
    url: '/api/auth/staff_profile/me/create/'
}); };

/**
 * Returns a list of all users.
 *
 * Only staff users with the `accounts.view_account` permission can access this view.
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => { return (options?.client ?? client).get<ListUsersResponse, ListUsersError, ThrowOnError>({
    ...options,
    url: '/api/auth/users/'
}); };

export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => { return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
    ...options,
    url: '/api/auth/users/{id}/'
}); };

/**
 * Update user information
 * Updates the user's information.
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateUserResponse, UpdateUserError, ThrowOnError>({
    ...options,
    url: '/api/auth/users/{id}/update/'
}); };

/**
 * Partially update user information
 * Partially updates the user's information.
 */
export const partiallyUpdateUser = <ThrowOnError extends boolean = false>(options: Options<PartiallyUpdateUserData, ThrowOnError>) => { return (options?.client ?? client).patch<PartiallyUpdateUserResponse, PartiallyUpdateUserError, ThrowOnError>({
    ...options,
    url: '/api/auth/users/{id}/update/'
}); };

/**
 * Change password
 * Changes the current user's password.
 */
export const changePassword = <ThrowOnError extends boolean = false>(options: Options<ChangePasswordData, ThrowOnError>) => { return (options?.client ?? client).post<ChangePasswordResponse, ChangePasswordError, ThrowOnError>({
    ...options,
    url: '/api/auth/users/change-password/'
}); };

/**
 * Invite staff member
 * Creates a new user in the database, and sends an email with the user's credentials.
 */
export const inviteStaff = <ThrowOnError extends boolean = false>(options: Options<InviteStaffData, ThrowOnError>) => { return (options?.client ?? client).post<InviteStaffResponse, InviteStaffError, ThrowOnError>({
    ...options,
    url: '/api/auth/users/invite/'
}); };

/**
 * Verify JWT tokens
 * Returns a 200 OK response when valid a valid access or refresh token is provided. If the token is invalid, expired or blacklisted, a 401 Unauthorized response is returned.
 */
export const verifyJwtTokens = <ThrowOnError extends boolean = false>(options: Options<VerifyJwtTokensData, ThrowOnError>) => { return (options?.client ?? client).post<VerifyJwtTokensResponse, VerifyJwtTokensError, ThrowOnError>({
    ...options,
    url: '/api/auth/verify/'
}); };

/**
 * List all Posts
 * List all Posts
 */
export const listPost = <ThrowOnError extends boolean = false>(options?: Options<ListPostData, ThrowOnError>) => { return (options?.client ?? client).get<ListPostResponse, ListPostError, ThrowOnError>({
    ...options,
    url: '/api/blog/'
}); };

/**
 * Create a new Post
 * Create a new Post
 */
export const createPost = <ThrowOnError extends boolean = false>(options: Options<CreatePostData, ThrowOnError>) => { return (options?.client ?? client).post<CreatePostResponse, CreatePostError, ThrowOnError>({
    ...options,
    url: '/api/blog/'
}); };

/**
 * Retrieve a Post
 * Retrieve a Post
 */
export const retrievePost = <ThrowOnError extends boolean = false>(options: Options<RetrievePostData, ThrowOnError>) => { return (options?.client ?? client).get<RetrievePostResponse, RetrievePostError, ThrowOnError>({
    ...options,
    url: '/api/blog/{slug}/'
}); };

/**
 * Update a Post
 * Update a Post
 */
export const updatePost = <ThrowOnError extends boolean = false>(options: Options<UpdatePostData, ThrowOnError>) => { return (options?.client ?? client).put<UpdatePostResponse, UpdatePostError, ThrowOnError>({
    ...options,
    url: '/api/blog/{slug}/'
}); };

export const apiBlogPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiBlogPartialUpdateData, ThrowOnError>) => { return (options?.client ?? client).patch<ApiBlogPartialUpdateResponse, ApiBlogPartialUpdateError, ThrowOnError>({
    ...options,
    url: '/api/blog/{slug}/'
}); };

/**
 * Delete a Post
 * Delete a Post
 */
export const deletePost = <ThrowOnError extends boolean = false>(options: Options<DeletePostData, ThrowOnError>) => { return (options?.client ?? client).delete<DeletePostResponse, DeletePostError, ThrowOnError>({
    ...options,
    url: '/api/blog/{slug}/'
}); };

export const apiHrmLeaveRequestRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiHrmLeaveRequestRetrieveData, ThrowOnError>) => { return (options?.client ?? client).get<ApiHrmLeaveRequestRetrieveResponse, ApiHrmLeaveRequestRetrieveError, ThrowOnError>({
    ...options,
    url: '/api/hrm/leave-request/{id}/'
}); };

/**
 * Update Leave Request
 * Updates Leave Request
 */
export const updateLeaveReq2 = <ThrowOnError extends boolean = false>(options: Options<UpdateLeaveReq2Data, ThrowOnError>) => { return (options?.client ?? client).put<UpdateLeaveReq2Response, UpdateLeaveReq2Error, ThrowOnError>({
    ...options,
    url: '/api/hrm/leave-request/{id}/'
}); };

/**
 * Update Leave Request
 * Updates Leave Request
 */
export const updateLeaveReq = <ThrowOnError extends boolean = false>(options: Options<UpdateLeaveReqData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdateLeaveReqResponse, UpdateLeaveReqError, ThrowOnError>({
    ...options,
    url: '/api/hrm/leave-request/{id}/'
}); };

export const updateLeaveStatus2 = <ThrowOnError extends boolean = false>(options: Options<UpdateLeaveStatus2Data, ThrowOnError>) => { return (options?.client ?? client).put<UpdateLeaveStatus2Response, UpdateLeaveStatus2Error, ThrowOnError>({
    ...options,
    url: '/api/hrm/leave-request/{id}/update-status/'
}); };

export const updateLeaveStatus = <ThrowOnError extends boolean = false>(options: Options<UpdateLeaveStatusData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdateLeaveStatusResponse, UpdateLeaveStatusError, ThrowOnError>({
    ...options,
    url: '/api/hrm/leave-request/{id}/update-status/'
}); };

export const apiHrmLeaveRequestAllList = <ThrowOnError extends boolean = false>(options?: Options<ApiHrmLeaveRequestAllListData, ThrowOnError>) => { return (options?.client ?? client).get<ApiHrmLeaveRequestAllListResponse, ApiHrmLeaveRequestAllListError, ThrowOnError>({
    ...options,
    url: '/api/hrm/leave-request/all/'
}); };

export const cerateLeave = <ThrowOnError extends boolean = false>(options: Options<CerateLeaveData, ThrowOnError>) => { return (options?.client ?? client).post<CerateLeaveResponse, CerateLeaveError, ThrowOnError>({
    ...options,
    url: '/api/hrm/leave-request/create/'
}); };

/**
 * List tasks
 * Lists all tasks.
 */
export const listTasks = <ThrowOnError extends boolean = false>(options?: Options<ListTasksData, ThrowOnError>) => { return (options?.client ?? client).get<ListTasksResponse, ListTasksError, ThrowOnError>({
    ...options,
    url: '/api/hrm/tasks/'
}); };

/**
 * Create task
 * Creates a new task.
 */
export const createTask = <ThrowOnError extends boolean = false>(options: Options<CreateTaskData, ThrowOnError>) => { return (options?.client ?? client).post<CreateTaskResponse, CreateTaskError, ThrowOnError>({
    ...options,
    url: '/api/hrm/tasks/'
}); };

/**
 * Retrieve task
 * Retrieves a task by the task ID.
 */
export const retrieveTask = <ThrowOnError extends boolean = false>(options: Options<RetrieveTaskData, ThrowOnError>) => { return (options?.client ?? client).get<RetrieveTaskResponse, RetrieveTaskError, ThrowOnError>({
    ...options,
    url: '/api/hrm/tasks/{id}/'
}); };

/**
 * Update task
 * Updates a task by the task ID.
 */
export const updateTask = <ThrowOnError extends boolean = false>(options: Options<UpdateTaskData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateTaskResponse, UpdateTaskError, ThrowOnError>({
    ...options,
    url: '/api/hrm/tasks/{id}/'
}); };

/**
 * Partially update task
 * Partially updates a task by the task ID.
 */
export const partiallyUpdateTask = <ThrowOnError extends boolean = false>(options: Options<PartiallyUpdateTaskData, ThrowOnError>) => { return (options?.client ?? client).patch<PartiallyUpdateTaskResponse, PartiallyUpdateTaskError, ThrowOnError>({
    ...options,
    url: '/api/hrm/tasks/{id}/'
}); };

/**
 * Delete task
 * Deletes a task by the task ID.
 */
export const deleteTask = <ThrowOnError extends boolean = false>(options: Options<DeleteTaskData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteTaskResponse, DeleteTaskError, ThrowOnError>({
    ...options,
    url: '/api/hrm/tasks/{id}/'
}); };

/**
 * Change task status
 * Changes the status of a task by the task ID.
 */
export const changeTaskStatus = <ThrowOnError extends boolean = false>(options: Options<ChangeTaskStatusData, ThrowOnError>) => { return (options?.client ?? client).put<ChangeTaskStatusResponse, ChangeTaskStatusError, ThrowOnError>({
    ...options,
    url: '/api/hrm/tasks/{id}/change-status/'
}); };

/**
 * List my tasks
 * Lists all tasks assigned to the currently logged in user.
 */
export const listMyTasks = <ThrowOnError extends boolean = false>(options?: Options<ListMyTasksData, ThrowOnError>) => { return (options?.client ?? client).get<ListMyTasksResponse, ListMyTasksError, ThrowOnError>({
    ...options,
    url: '/api/hrm/tasks/me/'
}); };

/**
 * List time entries
 * Lists all time entries.
 */
export const listTimeEntries = <ThrowOnError extends boolean = false>(options?: Options<ListTimeEntriesData, ThrowOnError>) => { return (options?.client ?? client).get<ListTimeEntriesResponse, ListTimeEntriesError, ThrowOnError>({
    ...options,
    url: '/api/hrm/time-entry/'
}); };

/**
 * List my time entries
 * Lists all time entries of the currently logged in user.
 */
export const listMyTimeEntries = <ThrowOnError extends boolean = false>(options?: Options<ListMyTimeEntriesData, ThrowOnError>) => { return (options?.client ?? client).get<ListMyTimeEntriesResponse, ListMyTimeEntriesError, ThrowOnError>({
    ...options,
    url: '/api/hrm/time-entry/me/'
}); };

/**
 * Log time entry
 * Logs a new time entry for the currently logged in user.
 */
export const logTimeEntry = <ThrowOnError extends boolean = false>(options: Options<LogTimeEntryData, ThrowOnError>) => { return (options?.client ?? client).post<LogTimeEntryResponse, LogTimeEntryError, ThrowOnError>({
    ...options,
    url: '/api/hrm/time-entry/me/'
}); };

/**
 * List work schedules
 * Lists all work schedules.
 */
export const listWorkSchedules = <ThrowOnError extends boolean = false>(options?: Options<ListWorkSchedulesData, ThrowOnError>) => { return (options?.client ?? client).get<ListWorkSchedulesResponse, ListWorkSchedulesError, ThrowOnError>({
    ...options,
    url: '/api/hrm/work-schedule/'
}); };

/**
 * Create work schedule
 * Creates a new work schedule for a staff member.
 */
export const createWorkSchedule = <ThrowOnError extends boolean = false>(options: Options<CreateWorkScheduleData, ThrowOnError>) => { return (options?.client ?? client).post<CreateWorkScheduleResponse, CreateWorkScheduleError, ThrowOnError>({
    ...options,
    url: '/api/hrm/work-schedule/'
}); };

/**
 * Update work schedule
 * Updates user's work schedule by the user's ID.
 */
export const updateWorkSchedule = <ThrowOnError extends boolean = false>(options: Options<UpdateWorkScheduleData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateWorkScheduleResponse, UpdateWorkScheduleError, ThrowOnError>({
    ...options,
    url: '/api/hrm/work-schedule/{id}/'
}); };

/**
 * Partially update work schedule
 * Partially updates user's work schedule by the user's ID.
 */
export const partiallyUpdateWorkSchedule = <ThrowOnError extends boolean = false>(options: Options<PartiallyUpdateWorkScheduleData, ThrowOnError>) => { return (options?.client ?? client).patch<PartiallyUpdateWorkScheduleResponse, PartiallyUpdateWorkScheduleError, ThrowOnError>({
    ...options,
    url: '/api/hrm/work-schedule/{id}/'
}); };

/**
 * List my work schedule
 * Lists the work schedule of the currently logged in user.
 */
export const listMyWorkSchedule = <ThrowOnError extends boolean = false>(options?: Options<ListMyWorkScheduleData, ThrowOnError>) => { return (options?.client ?? client).get<ListMyWorkScheduleResponse, ListMyWorkScheduleError, ThrowOnError>({
    ...options,
    url: '/api/hrm/work-schedule/me/'
}); };

/**
 * List all Images
 * List all Images
 */
export const listImage = <ThrowOnError extends boolean = false>(options?: Options<ListImageData, ThrowOnError>) => { return (options?.client ?? client).get<ListImageResponse, ListImageError, ThrowOnError>({
    ...options,
    url: '/api/images/'
}); };

/**
 * Create a new Image
 * Create a new Image
 */
export const createImage = <ThrowOnError extends boolean = false>(options: Options<CreateImageData, ThrowOnError>) => { return (options?.client ?? client).post<CreateImageResponse, CreateImageError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        ...options?.headers
    },
    url: '/api/images/'
}); };

/**
 * Retrieve an Image
 * Retrieve an Image
 */
export const retrieveImage = <ThrowOnError extends boolean = false>(options: Options<RetrieveImageData, ThrowOnError>) => { return (options?.client ?? client).get<RetrieveImageResponse, RetrieveImageError, ThrowOnError>({
    ...options,
    url: '/api/images/{id}/'
}); };

/**
 * Update an Image
 * Update an Image
 */
export const updateImage = <ThrowOnError extends boolean = false>(options: Options<UpdateImageData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateImageResponse, UpdateImageError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null,
        ...options?.headers
    },
    url: '/api/images/{id}/'
}); };

export const apiImagesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiImagesPartialUpdateData, ThrowOnError>) => { return (options?.client ?? client).patch<ApiImagesPartialUpdateResponse, ApiImagesPartialUpdateError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null,
        ...options?.headers
    },
    url: '/api/images/{id}/'
}); };

/**
 * Delete an Image
 * Delete an Image
 */
export const deleteImage = <ThrowOnError extends boolean = false>(options: Options<DeleteImageData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteImageResponse, DeleteImageError, ThrowOnError>({
    ...options,
    url: '/api/images/{id}/'
}); };

/**
 * List All Batches
 * Returns All Batches in Inventory
 */
export const listBatches = <ThrowOnError extends boolean = false>(options?: Options<ListBatchesData, ThrowOnError>) => { return (options?.client ?? client).get<ListBatchesResponse, ListBatchesError, ThrowOnError>({
    ...options,
    url: '/api/inventory/batch/'
}); };

/**
 * Create Inventory Batch
 * Create And Return New Batch For Inventory
 */
export const createBatches = <ThrowOnError extends boolean = false>(options: Options<CreateBatchesData, ThrowOnError>) => { return (options?.client ?? client).post<CreateBatchesResponse, CreateBatchesError, ThrowOnError>({
    ...options,
    url: '/api/inventory/batch/'
}); };

/**
 * Get A Batch
 * Get A Batch From All Batches
 */
export const getBatches = <ThrowOnError extends boolean = false>(options: Options<GetBatchesData, ThrowOnError>) => { return (options?.client ?? client).get<GetBatchesResponse, GetBatchesError, ThrowOnError>({
    ...options,
    url: '/api/inventory/batch/{id}/'
}); };

export const apiInventoryBatchUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryBatchUpdateData, ThrowOnError>) => { return (options?.client ?? client).put<ApiInventoryBatchUpdateResponse, ApiInventoryBatchUpdateError, ThrowOnError>({
    ...options,
    url: '/api/inventory/batch/{id}/'
}); };

/**
 * Update A Batch
 * Update Batch Information
 */
export const updateBatches = <ThrowOnError extends boolean = false>(options: Options<UpdateBatchesData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdateBatchesResponse, UpdateBatchesError, ThrowOnError>({
    ...options,
    url: '/api/inventory/batch/{id}/'
}); };

export const apiInventoryBatchDestroy = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryBatchDestroyData, ThrowOnError>) => { return (options?.client ?? client).delete<ApiInventoryBatchDestroyResponse, ApiInventoryBatchDestroyError, ThrowOnError>({
    ...options,
    url: '/api/inventory/batch/{id}/'
}); };

export const apiInventoryBatchAttributeUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryBatchAttributeUpdateData, ThrowOnError>) => { return (options?.client ?? client).put<ApiInventoryBatchAttributeUpdateResponse, ApiInventoryBatchAttributeUpdateError, ThrowOnError>({
    ...options,
    url: '/api/inventory/batch/{id}/attribute/'
}); };

export const apiInventoryBatchAttributePartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryBatchAttributePartialUpdateData, ThrowOnError>) => { return (options?.client ?? client).patch<ApiInventoryBatchAttributePartialUpdateResponse, ApiInventoryBatchAttributePartialUpdateError, ThrowOnError>({
    ...options,
    url: '/api/inventory/batch/{id}/attribute/'
}); };

export const apiInventoryBatchAttributeCreate = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryBatchAttributeCreateData, ThrowOnError>) => { return (options?.client ?? client).post<ApiInventoryBatchAttributeCreateResponse, ApiInventoryBatchAttributeCreateError, ThrowOnError>({
    ...options,
    url: '/api/inventory/batch/attribute/'
}); };

/**
 * List All Inventory Product
 * Returns All Products in Inventory
 */
export const listProducts = <ThrowOnError extends boolean = false>(options?: Options<ListProductsData, ThrowOnError>) => { return (options?.client ?? client).get<ListProductsResponse, ListProductsError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product/'
}); };

/**
 * Create Inventory Product
 * Create And Return New Product For Inventory
 */
export const createProduct = <ThrowOnError extends boolean = false>(options: Options<CreateProductData, ThrowOnError>) => { return (options?.client ?? client).post<CreateProductResponse, CreateProductError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product/'
}); };

/**
 * List All Inventory Product Type
 * Returns All Product Types in Inventory
 */
export const listProductType = <ThrowOnError extends boolean = false>(options?: Options<ListProductTypeData, ThrowOnError>) => { return (options?.client ?? client).get<ListProductTypeResponse, ListProductTypeError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product-type/'
}); };

/**
 * Create Inventory Product Type
 * Create And Return New Product Type For Inventory
 */
export const createProductType = <ThrowOnError extends boolean = false>(options: Options<CreateProductTypeData, ThrowOnError>) => { return (options?.client ?? client).post<CreateProductTypeResponse, CreateProductTypeError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product-type/'
}); };

/**
 * Get A Product Type
 * Get A Product Type From All Product Type
 */
export const getProductType = <ThrowOnError extends boolean = false>(options: Options<GetProductTypeData, ThrowOnError>) => { return (options?.client ?? client).get<GetProductTypeResponse, GetProductTypeError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product-type/{id}/'
}); };

export const apiInventoryProductTypeUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryProductTypeUpdateData, ThrowOnError>) => { return (options?.client ?? client).put<ApiInventoryProductTypeUpdateResponse, ApiInventoryProductTypeUpdateError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product-type/{id}/'
}); };

/**
 * Update A Product Type
 * Update Product Type Information
 */
export const updateProductType = <ThrowOnError extends boolean = false>(options: Options<UpdateProductTypeData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdateProductTypeResponse, UpdateProductTypeError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product-type/{id}/'
}); };

export const apiInventoryProductTypeDestroy = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryProductTypeDestroyData, ThrowOnError>) => { return (options?.client ?? client).delete<ApiInventoryProductTypeDestroyResponse, ApiInventoryProductTypeDestroyError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product-type/{id}/'
}); };

export const apiInventoryProductTypeBatchAttributeRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryProductTypeBatchAttributeRetrieveData, ThrowOnError>) => { return (options?.client ?? client).get<ApiInventoryProductTypeBatchAttributeRetrieveResponse, ApiInventoryProductTypeBatchAttributeRetrieveError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product-type/{id}/batch-attribute/{attr_id}/'
}); };

export const apiInventoryProductTypeBatchAttributeUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryProductTypeBatchAttributeUpdateData, ThrowOnError>) => { return (options?.client ?? client).put<ApiInventoryProductTypeBatchAttributeUpdateResponse, ApiInventoryProductTypeBatchAttributeUpdateError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product-type/{id}/batch-attribute/{attr_id}/'
}); };

export const apiInventoryProductTypeBatchAttributePartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryProductTypeBatchAttributePartialUpdateData, ThrowOnError>) => { return (options?.client ?? client).patch<ApiInventoryProductTypeBatchAttributePartialUpdateResponse, ApiInventoryProductTypeBatchAttributePartialUpdateError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product-type/{id}/batch-attribute/{attr_id}/'
}); };

export const apiInventoryProductTypeBatchAttributeDestroy = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryProductTypeBatchAttributeDestroyData, ThrowOnError>) => { return (options?.client ?? client).delete<ApiInventoryProductTypeBatchAttributeDestroyResponse, ApiInventoryProductTypeBatchAttributeDestroyError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product-type/{id}/batch-attribute/{attr_id}/'
}); };

export const apiInventoryProductTypeBatchAttributeCreate = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryProductTypeBatchAttributeCreateData, ThrowOnError>) => { return (options?.client ?? client).post<ApiInventoryProductTypeBatchAttributeCreateResponse, ApiInventoryProductTypeBatchAttributeCreateError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product-type/batch-attribute/'
}); };

/**
 * Get A Product
 * Get A Product From All Products
 */
export const getProduct = <ThrowOnError extends boolean = false>(options: Options<GetProductData, ThrowOnError>) => { return (options?.client ?? client).get<GetProductResponse, GetProductError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product/{id}/'
}); };

export const apiInventoryProductUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryProductUpdateData, ThrowOnError>) => { return (options?.client ?? client).put<ApiInventoryProductUpdateResponse, ApiInventoryProductUpdateError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product/{id}/'
}); };

/**
 * Update A Product
 * Update Product Information
 */
export const updateProduct = <ThrowOnError extends boolean = false>(options: Options<UpdateProductData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdateProductResponse, UpdateProductError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product/{id}/'
}); };

export const apiInventoryProductDestroy = <ThrowOnError extends boolean = false>(options: Options<ApiInventoryProductDestroyData, ThrowOnError>) => { return (options?.client ?? client).delete<ApiInventoryProductDestroyResponse, ApiInventoryProductDestroyError, ThrowOnError>({
    ...options,
    url: '/api/inventory/product/{id}/'
}); };

/**
 * List All Inventory Supplier
 * Returns All  Supplier
 */
export const listSupplier = <ThrowOnError extends boolean = false>(options?: Options<ListSupplierData, ThrowOnError>) => { return (options?.client ?? client).get<ListSupplierResponse, ListSupplierError, ThrowOnError>({
    ...options,
    url: '/api/inventory/supplier/'
}); };

/**
 * Create Inventory Supplier
 * Create And Return New Supplier
 */
export const createSupplier = <ThrowOnError extends boolean = false>(options: Options<CreateSupplierData, ThrowOnError>) => { return (options?.client ?? client).post<CreateSupplierResponse, CreateSupplierError, ThrowOnError>({
    ...options,
    url: '/api/inventory/supplier/'
}); };

/**
 * Get A Supplier
 * Get A Supplier From All Suppliers
 */
export const getSupplier = <ThrowOnError extends boolean = false>(options: Options<GetSupplierData, ThrowOnError>) => { return (options?.client ?? client).get<GetSupplierResponse, GetSupplierError, ThrowOnError>({
    ...options,
    url: '/api/inventory/supplier/{id}/'
}); };

export const apiInventorySupplierUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiInventorySupplierUpdateData, ThrowOnError>) => { return (options?.client ?? client).put<ApiInventorySupplierUpdateResponse, ApiInventorySupplierUpdateError, ThrowOnError>({
    ...options,
    url: '/api/inventory/supplier/{id}/'
}); };

/**
 * Update A Supplier
 * Update Supplier Information
 */
export const updateSupplier = <ThrowOnError extends boolean = false>(options: Options<UpdateSupplierData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdateSupplierResponse, UpdateSupplierError, ThrowOnError>({
    ...options,
    url: '/api/inventory/supplier/{id}/'
}); };

export const apiInventorySupplierDestroy = <ThrowOnError extends boolean = false>(options: Options<ApiInventorySupplierDestroyData, ThrowOnError>) => { return (options?.client ?? client).delete<ApiInventorySupplierDestroyResponse, ApiInventorySupplierDestroyError, ThrowOnError>({
    ...options,
    url: '/api/inventory/supplier/{id}/'
}); };