// This file is auto-generated by @hey-api/openapi-ts

export const AccountSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        is_superuser: {
            type: 'boolean',
            readOnly: true,
            title: 'Superuser status',
            description: 'Designates that this user has all permissions without explicitly assigning them.'
        },
        email: {
            type: 'string',
            format: 'email',
            readOnly: true,
            title: 'Email Address'
        },
        is_pro_user: {
            type: 'boolean',
            readOnly: true,
            title: 'Pro User Status'
        },
        is_staff: {
            type: 'boolean',
            readOnly: true,
            title: 'Staff Status'
        },
        is_active: {
            type: 'boolean',
            readOnly: true,
            title: 'Active Status'
        },
        is_manager: {
            type: 'boolean',
            readOnly: true,
            title: 'Manager Status'
        },
        date_joined: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        last_login: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        staff_profile: {
            allOf: [
                {
                    '$ref': '#/components/schemas/StaffProfile'
                }
            ],
            readOnly: true
        },
        groups: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Group'
            },
            readOnly: true
        },
        managers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Manager'
            },
            readOnly: true
        }
    },
    required: ['date_joined', 'email', 'groups', 'id', 'is_active', 'is_manager', 'is_pro_user', 'is_staff', 'is_superuser', 'last_login', 'managers', 'staff_profile']
} as const;

export const AdminExistsMessageSchema = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            maxLength: 100
        },
        admin_exists: {
            type: 'boolean'
        }
    },
    required: ['admin_exists', 'message']
} as const;

export const AttributeSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        value: {
            type: 'string',
            default: ''
        },
        batch: {
            type: 'integer',
            writeOnly: true
        }
    },
    required: ['batch', 'id']
} as const;

export const AttributeSerializerCloneSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        value: {
            type: 'string'
        }
    },
    required: ['id', 'value']
} as const;

export const BatchSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        attributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AttributeSerializerClone'
            }
        },
        batch_number: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        vendor: {
            type: 'string'
        },
        manufacturer: {
            type: 'string'
        },
        brand: {
            type: 'string'
        },
        delivery_date: {
            type: 'string',
            format: 'date'
        },
        purchase_price: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        list_price: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        list_unit: {
            type: 'string'
        },
        reduction_from_vendor: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        purchase_tax_percentage: {
            type: 'string',
            format: 'decimal',
            pattern: '^-?\\d{0,2}(?:\\.\\d{0,2})?$'
        },
        quantity: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        quantity_weight_unit: {
            '$ref': '#/components/schemas/QuantityWeightUnitEnum'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            title: 'Date Created'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        product: {
            type: 'integer'
        },
        supplier: {
            type: 'integer'
        }
    },
    required: ['attributes', 'batch_number', 'brand', 'created_at', 'delivery_date', 'id', 'list_price', 'list_unit', 'manufacturer', 'product', 'purchase_price', 'quantity_weight_unit', 'supplier', 'updated_at', 'vendor']
} as const;

export const BatchAttrSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            readOnly: true
        },
        name: {
            type: 'string'
        },
        is_required: {
            type: 'boolean',
            default: true
        },
        default_value: {
            type: 'string',
            default: ''
        },
        data_type: {
            allOf: [
                {
                    '$ref': '#/components/schemas/DataTypeEnum'
                }
            ],
            default: 'text'
        },
        choice_list: {
            type: 'array',
            items: {},
            maxItems: 50
        }
    },
    required: ['id', 'name']
} as const;

export const ChangePasswordSchema = {
    type: 'object',
    properties: {
        old_password: {
            type: 'string'
        },
        new_password: {
            type: 'string'
        },
        new_password2: {
            type: 'string'
        }
    },
    required: ['new_password', 'new_password2', 'old_password']
} as const;

export const ChangeTaskStatusSchema = {
    type: 'object',
    properties: {
        status: {
            '$ref': '#/components/schemas/Status3b2Enum'
        }
    },
    required: ['status']
} as const;

export const CreateBatchAttrSchema = {
    type: 'object',
    properties: {
        batch_attribute: {
            '$ref': '#/components/schemas/BatchAttr'
        },
        product_type: {
            type: 'integer'
        }
    },
    required: ['batch_attribute', 'product_type']
} as const;

export const DataTypeEnumSchema = {
    enum: ['number', 'select', 'multi-select', 'text'],
    type: 'string',
    description: `* \`number\` - number
* \`select\` - select
* \`multi-select\` - multi-select
* \`text\` - text`
} as const;

export const DayOfWeekEnumSchema = {
    enum: [1, 2, 3, 4, 5, 6, 7],
    type: 'integer',
    description: `* \`1\` - Monday
* \`2\` - Tuesday
* \`3\` - Wednesday
* \`4\` - Thursday
* \`5\` - Friday
* \`6\` - Saturday
* \`7\` - Sunday`
} as const;

export const DepartmentEnumSchema = {
    enum: ['SALES', 'PRODUCTION'],
    type: 'string',
    description: `* \`SALES\` - Sales
* \`PRODUCTION\` - Production`
} as const;

export const EmailSchema = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email'
        }
    },
    required: ['email']
} as const;

export const EventTypeEnumSchema = {
    enum: ['CLOCK_IN', 'CLOCK_OUT', 'BREAK_START', 'BREAK_END'],
    type: 'string',
    description: `* \`CLOCK_IN\` - Clock In
* \`CLOCK_OUT\` - Clock Out
* \`BREAK_START\` - Break Start
* \`BREAK_END\` - Break End`
} as const;

export const GroupSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        name: {
            type: 'string',
            maxLength: 150
        },
        permissions: {
            type: 'array',
            items: {
                type: 'integer'
            }
        }
    },
    required: ['id', 'name', 'permissions']
} as const;

export const ImageSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        image: {
            type: 'string',
            format: 'uri'
        },
        title: {
            type: 'string',
            maxLength: 200
        },
        title_en: {
            type: 'string',
            nullable: true,
            title: 'Title [en]',
            maxLength: 200
        },
        title_nl: {
            type: 'string',
            nullable: true,
            title: 'Title [nl]',
            maxLength: 200
        },
        title_fr: {
            type: 'string',
            nullable: true,
            title: 'Title [fr]',
            maxLength: 200
        },
        image_type: {
            '$ref': '#/components/schemas/ImageTypeEnum'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        owner: {
            type: 'integer',
            nullable: true
        }
    },
    required: ['created_at', 'id', 'image', 'title', 'updated_at']
} as const;

export const ImageTypeEnumSchema = {
    enum: ['public', 'private'],
    type: 'string',
    description: `* \`public\` - public
* \`private\` - private`
} as const;

export const InviteStaffSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        password: {
            type: 'string',
            writeOnly: true
        },
        is_superuser: {
            type: 'boolean',
            readOnly: true,
            title: 'Superuser status',
            description: 'Designates that this user has all permissions without explicitly assigning them.'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email Address',
            maxLength: 254
        },
        is_pro_user: {
            type: 'boolean',
            readOnly: true,
            title: 'Pro User Status'
        },
        is_staff: {
            type: 'boolean',
            readOnly: true,
            title: 'Staff Status'
        },
        is_active: {
            type: 'boolean',
            readOnly: true,
            title: 'Active Status'
        },
        is_manager: {
            type: 'boolean',
            title: 'Manager Status'
        },
        date_joined: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        last_login: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        staff_profile: {
            type: 'integer',
            readOnly: true,
            nullable: true
        },
        password2: {
            type: 'string',
            writeOnly: true
        },
        groups: {
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        managers: {
            type: 'array',
            items: {
                type: 'integer'
            }
        }
    },
    required: ['date_joined', 'email', 'groups', 'id', 'is_active', 'is_pro_user', 'is_staff', 'is_superuser', 'last_login', 'password', 'password2', 'staff_profile']
} as const;

export const LeaveSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        title: {
            type: 'string',
            maxLength: 200
        },
        reason: {
            type: 'string'
        },
        status: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Status86bEnum'
                }
            ],
            readOnly: true
        },
        start_date: {
            type: 'string',
            format: 'date-time'
        },
        end_date: {
            type: 'string',
            format: 'date-time'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        staff: {
            type: 'integer',
            title: 'Account'
        },
        reviewed_by: {
            type: 'integer',
            readOnly: true,
            nullable: true,
            title: 'Account'
        }
    },
    required: ['created_at', 'end_date', 'id', 'reason', 'reviewed_by', 'start_date', 'status', 'title', 'updated_at']
} as const;

export const LeaveStatusEditSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        title: {
            type: 'string',
            maxLength: 200
        },
        reason: {
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/Status86bEnum'
        },
        start_date: {
            type: 'string',
            format: 'date-time'
        },
        end_date: {
            type: 'string',
            format: 'date-time'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        staff: {
            type: 'integer',
            readOnly: true,
            title: 'Account'
        },
        reviewed_by: {
            type: 'integer',
            nullable: true,
            title: 'Account'
        }
    },
    required: ['created_at', 'id', 'staff', 'updated_at']
} as const;

export const ManagerSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email Address',
            maxLength: 254
        },
        is_staff: {
            type: 'boolean',
            title: 'Staff Status'
        },
        is_active: {
            type: 'boolean',
            title: 'Active Status'
        },
        is_superuser: {
            type: 'boolean',
            title: 'Superuser status',
            description: 'Designates that this user has all permissions without explicitly assigning them.'
        },
        is_pro_user: {
            type: 'boolean',
            title: 'Pro User Status'
        },
        staff_profile: {
            type: 'integer',
            nullable: true
        }
    },
    required: ['email', 'id']
} as const;

export const MessageSchema = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            maxLength: 100
        }
    },
    required: ['message']
} as const;

export const MyPermissionsSchema = {
    type: 'object',
    properties: {
        permissions: {
            type: 'array',
            items: {
                type: 'string'
            },
            readOnly: true
        }
    },
    required: ['permissions']
} as const;

export const PaginatedAccountListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Account'
            }
        }
    }
} as const;

export const PaginatedBatchListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Batch'
            }
        }
    }
} as const;

export const PaginatedGroupListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Group'
            }
        }
    }
} as const;

export const PaginatedImageListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Image'
            }
        }
    }
} as const;

export const PaginatedLeaveStatusEditListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LeaveStatusEdit'
            }
        }
    }
} as const;

export const PaginatedPermissionListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Permission'
            }
        }
    }
} as const;

export const PaginatedPostListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Post'
            }
        }
    }
} as const;

export const PaginatedProductListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Product'
            }
        }
    }
} as const;

export const PaginatedProductTypeListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductType'
            }
        }
    }
} as const;

export const PaginatedSupplierListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Supplier'
            }
        }
    }
} as const;

export const PaginatedTaskListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Task'
            }
        }
    }
} as const;

export const PaginatedTimeEntryListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TimeEntry'
            }
        }
    }
} as const;

export const PaginatedWorkScheduleListSchema = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WorkSchedule'
            }
        }
    }
} as const;

export const PasswordTokenSchema = {
    type: 'object',
    properties: {
        password: {
            type: 'string'
        },
        token: {
            type: 'string'
        }
    },
    required: ['password', 'token']
} as const;

export const PatchedAttributeSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        value: {
            type: 'string',
            default: ''
        },
        batch: {
            type: 'integer',
            writeOnly: true
        }
    }
} as const;

export const PatchedBatchSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        attributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AttributeSerializerClone'
            }
        },
        batch_number: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        vendor: {
            type: 'string'
        },
        manufacturer: {
            type: 'string'
        },
        brand: {
            type: 'string'
        },
        delivery_date: {
            type: 'string',
            format: 'date'
        },
        purchase_price: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        list_price: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        list_unit: {
            type: 'string'
        },
        reduction_from_vendor: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        purchase_tax_percentage: {
            type: 'string',
            format: 'decimal',
            pattern: '^-?\\d{0,2}(?:\\.\\d{0,2})?$'
        },
        quantity: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        quantity_weight_unit: {
            '$ref': '#/components/schemas/QuantityWeightUnitEnum'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            title: 'Date Created'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        product: {
            type: 'integer'
        },
        supplier: {
            type: 'integer'
        }
    }
} as const;

export const PatchedGroupSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        name: {
            type: 'string',
            maxLength: 150
        },
        permissions: {
            type: 'array',
            items: {
                type: 'integer'
            }
        }
    }
} as const;

export const PatchedImageSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        image: {
            type: 'string',
            format: 'uri'
        },
        title: {
            type: 'string',
            maxLength: 200
        },
        title_en: {
            type: 'string',
            nullable: true,
            title: 'Title [en]',
            maxLength: 200
        },
        title_nl: {
            type: 'string',
            nullable: true,
            title: 'Title [nl]',
            maxLength: 200
        },
        title_fr: {
            type: 'string',
            nullable: true,
            title: 'Title [fr]',
            maxLength: 200
        },
        image_type: {
            '$ref': '#/components/schemas/ImageTypeEnum'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        owner: {
            type: 'integer',
            nullable: true
        }
    }
} as const;

export const PatchedLeaveStatusEditSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        title: {
            type: 'string',
            maxLength: 200
        },
        reason: {
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/Status86bEnum'
        },
        start_date: {
            type: 'string',
            format: 'date-time'
        },
        end_date: {
            type: 'string',
            format: 'date-time'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        staff: {
            type: 'integer',
            readOnly: true,
            title: 'Account'
        },
        reviewed_by: {
            type: 'integer',
            nullable: true,
            title: 'Account'
        }
    }
} as const;

export const PatchedPostSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        title: {
            type: 'string',
            maxLength: 120
        },
        slug: {
            type: 'string',
            readOnly: true,
            pattern: '^[-a-zA-Z0-9_]+$'
        },
        author: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Account'
                }
            ],
            readOnly: true
        },
        featured_image: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Image'
                }
            ],
            readOnly: true
        },
        excerpt: {
            type: 'string'
        },
        content: {
            type: 'string'
        },
        published: {
            type: 'boolean'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        featured_image_id: {
            type: 'integer'
        }
    }
} as const;

export const PatchedProductSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        name: {
            type: 'string',
            maxLength: 200
        },
        name_en: {
            type: 'string',
            nullable: true,
            title: 'Name [en]',
            maxLength: 200
        },
        name_nl: {
            type: 'string',
            nullable: true,
            title: 'Name [nl]',
            maxLength: 200
        },
        name_fr: {
            type: 'string',
            nullable: true,
            title: 'Name [fr]',
            maxLength: 200
        },
        slug: {
            type: 'string',
            maxLength: 500,
            pattern: '^[-a-zA-Z0-9_]+$'
        },
        sku: {
            type: 'string',
            maxLength: 200
        },
        short_customer_facing_description: {
            type: 'string'
        },
        short_customer_facing_description_en: {
            type: 'string',
            nullable: true,
            title: 'Short Customer Facing Description [en]'
        },
        short_customer_facing_description_nl: {
            type: 'string',
            nullable: true,
            title: 'Short Customer Facing Description [nl]'
        },
        short_customer_facing_description_fr: {
            type: 'string',
            nullable: true,
            title: 'Short Customer Facing Description [fr]'
        },
        long_customer_facing_description: {
            type: 'string'
        },
        long_customer_facing_description_en: {
            type: 'string',
            nullable: true,
            title: 'Long Customer Facing Description [en]'
        },
        long_customer_facing_description_nl: {
            type: 'string',
            nullable: true,
            title: 'Long Customer Facing Description [nl]'
        },
        long_customer_facing_description_fr: {
            type: 'string',
            nullable: true,
            title: 'Long Customer Facing Description [fr]'
        },
        short_internal_use_description: {
            type: 'string'
        },
        short_internal_use_description_en: {
            type: 'string',
            nullable: true,
            title: 'Short Internal Use Description [en]'
        },
        short_internal_use_description_nl: {
            type: 'string',
            nullable: true,
            title: 'Short Internal Use Description [nl]'
        },
        short_internal_use_description_fr: {
            type: 'string',
            nullable: true,
            title: 'Short Internal Use Description [fr]'
        },
        long_internal_use_description: {
            type: 'string'
        },
        long_internal_use_description_en: {
            type: 'string',
            nullable: true,
            title: 'Long Internal Use Description [en]'
        },
        long_internal_use_description_nl: {
            type: 'string',
            nullable: true,
            title: 'Long Internal Use Description [nl]'
        },
        long_internal_use_description_fr: {
            type: 'string',
            nullable: true,
            title: 'Long Internal Use Description [fr]'
        },
        ingredients: {
            type: 'string'
        },
        ingredients_en: {
            type: 'string',
            nullable: true,
            title: 'Ingredients [en]'
        },
        ingredients_nl: {
            type: 'string',
            nullable: true,
            title: 'Ingredients [nl]'
        },
        ingredients_fr: {
            type: 'string',
            nullable: true,
            title: 'Ingredients [fr]'
        },
        allergens: {
            type: 'string'
        },
        allergens_en: {
            type: 'string',
            nullable: true,
            title: 'Allergens [en]'
        },
        allergens_nl: {
            type: 'string',
            nullable: true,
            title: 'Allergens [nl]'
        },
        allergens_fr: {
            type: 'string',
            nullable: true,
            title: 'Allergens [fr]'
        },
        storage_requirement: {
            type: 'string'
        },
        storage_requirement_en: {
            type: 'string',
            nullable: true,
            title: 'Storage Requirement [en]'
        },
        storage_requirement_nl: {
            type: 'string',
            nullable: true,
            title: 'Storage Requirement [nl]'
        },
        storage_requirement_fr: {
            type: 'string',
            nullable: true,
            title: 'Storage Requirement [fr]'
        },
        nutritional_information: {
            type: 'string'
        },
        nutritional_information_en: {
            type: 'string',
            nullable: true,
            title: 'Nutritional Information [en]'
        },
        nutritional_information_nl: {
            type: 'string',
            nullable: true,
            title: 'Nutritional Information [nl]'
        },
        nutritional_information_fr: {
            type: 'string',
            nullable: true,
            title: 'Nutritional Information [fr]'
        },
        nutritional_claims: {
            type: 'string'
        },
        nutritional_claims_en: {
            type: 'string',
            nullable: true,
            title: 'Nutritional Claims [en]'
        },
        nutritional_claims_nl: {
            type: 'string',
            nullable: true,
            title: 'Nutritional Claims [nl]'
        },
        nutritional_claims_fr: {
            type: 'string',
            nullable: true,
            title: 'Nutritional Claims [fr]'
        },
        health_claims: {
            type: 'string'
        },
        health_claims_en: {
            type: 'string',
            nullable: true,
            title: 'Health Claims [en]'
        },
        health_claims_nl: {
            type: 'string',
            nullable: true,
            title: 'Health Claims [nl]'
        },
        health_claims_fr: {
            type: 'string',
            nullable: true,
            title: 'Health Claims [fr]'
        },
        selling_tax_percentage: {
            type: 'string',
            format: 'decimal',
            pattern: '^-?\\d{0,2}(?:\\.\\d{0,2})?$'
        },
        shop_selling_price_vat_incl_b2b: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        shop_selling_price_vat_incl_b2c: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        ecommerce_selling_price_vat_excl_b2b: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64',
            title: 'E-commerce Selling Price Vat Excl B2b'
        },
        ecommerce_selling_price_vat_excl_b2c: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64',
            title: 'E-commerce Selling Price Vat Excl B2c'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            title: 'Date Created'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        featured_img: {
            type: 'integer',
            nullable: true
        },
        preferred_vendor: {
            type: 'integer',
            nullable: true
        },
        product_type: {
            type: 'integer'
        },
        images: {
            type: 'array',
            items: {
                type: 'integer'
            }
        }
    }
} as const;

export const PatchedProductTypeSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        batch_attributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BatchAttr'
            }
        },
        name: {
            type: 'string',
            maxLength: 300
        },
        is_enabled: {
            type: 'boolean'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            title: 'Date Created'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        }
    }
} as const;

export const PatchedStaffProfileSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        profile_picture: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Image'
                }
            ],
            readOnly: true
        },
        profile_picture_id: {
            type: 'integer',
            writeOnly: true
        },
        first_name: {
            type: 'string',
            maxLength: 50
        },
        last_name: {
            type: 'string',
            maxLength: 50
        },
        preferred_name: {
            type: 'string',
            maxLength: 50
        },
        preferred_weekly_working_hours: {
            type: 'integer',
            maximum: 32767,
            minimum: 0
        },
        phone_number: {
            type: 'string',
            maxLength: 15
        },
        address: {
            type: 'string'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            nullable: true
        },
        emergency_contact_name: {
            type: 'string',
            maxLength: 50
        },
        emergency_contact_number: {
            type: 'string',
            maxLength: 15
        },
        emergency_contact_relationship: {
            type: 'string',
            maxLength: 50
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        }
    }
} as const;

export const PatchedSupplierSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        company_name: {
            type: 'string'
        },
        contact_person: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            format: 'email',
            maxLength: 254
        },
        phone: {
            type: 'string',
            nullable: true
        },
        address: {
            type: 'string'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            title: 'Date Created'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        logo: {
            type: 'integer',
            nullable: true
        }
    }
} as const;

export const PatchedTaskSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        title: {
            type: 'string',
            maxLength: 255
        },
        description: {
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/Status3b2Enum'
        },
        priority: {
            '$ref': '#/components/schemas/PriorityEnum'
        },
        start_time: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        end_time: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        assignees_ids: {
            type: 'array',
            items: {
                type: 'integer',
                writeOnly: true
            },
            writeOnly: true
        },
        assignees: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Account'
            },
            readOnly: true
        }
    }
} as const;

export const PatchedUpdateAccountSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        is_superuser: {
            type: 'boolean',
            readOnly: true,
            title: 'Superuser status',
            description: 'Designates that this user has all permissions without explicitly assigning them.'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email Address',
            maxLength: 254
        },
        is_pro_user: {
            type: 'boolean',
            title: 'Pro User Status'
        },
        is_staff: {
            type: 'boolean',
            title: 'Staff Status'
        },
        is_active: {
            type: 'boolean',
            title: 'Active Status'
        },
        is_manager: {
            type: 'boolean',
            title: 'Manager Status'
        },
        date_joined: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        last_login: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        staff_profile: {
            type: 'integer',
            readOnly: true,
            nullable: true
        },
        manager_ids: {
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        managers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Manager'
            },
            readOnly: true
        }
    }
} as const;

export const PatchedWorkScheduleUpdateSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        day_of_week: {
            allOf: [
                {
                    '$ref': '#/components/schemas/DayOfWeekEnum'
                }
            ],
            minimum: -2147483648,
            maximum: 2147483647
        },
        department: {
            '$ref': '#/components/schemas/DepartmentEnum'
        },
        start_time: {
            type: 'string',
            format: 'time'
        },
        end_time: {
            type: 'string',
            format: 'time'
        },
        account_id: {
            type: 'integer',
            readOnly: true
        }
    }
} as const;

export const PermissionSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        name: {
            type: 'string',
            maxLength: 255
        },
        codename: {
            type: 'string',
            maxLength: 100
        },
        content_type: {
            type: 'integer'
        }
    },
    required: ['codename', 'content_type', 'id', 'name']
} as const;

export const PostSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        title: {
            type: 'string',
            maxLength: 120
        },
        slug: {
            type: 'string',
            readOnly: true,
            pattern: '^[-a-zA-Z0-9_]+$'
        },
        author: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Account'
                }
            ],
            readOnly: true
        },
        featured_image: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Image'
                }
            ],
            readOnly: true
        },
        excerpt: {
            type: 'string'
        },
        content: {
            type: 'string'
        },
        published: {
            type: 'boolean'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        featured_image_id: {
            type: 'integer'
        }
    },
    required: ['author', 'content', 'created_at', 'excerpt', 'featured_image', 'featured_image_id', 'id', 'slug', 'title', 'updated_at']
} as const;

export const PriorityEnumSchema = {
    enum: ['LOW', 'NORMAL', 'HIGH'],
    type: 'string',
    description: `* \`LOW\` - Low
* \`NORMAL\` - Normal
* \`HIGH\` - High`
} as const;

export const ProductSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        name: {
            type: 'string',
            maxLength: 200
        },
        name_en: {
            type: 'string',
            nullable: true,
            title: 'Name [en]',
            maxLength: 200
        },
        name_nl: {
            type: 'string',
            nullable: true,
            title: 'Name [nl]',
            maxLength: 200
        },
        name_fr: {
            type: 'string',
            nullable: true,
            title: 'Name [fr]',
            maxLength: 200
        },
        slug: {
            type: 'string',
            maxLength: 500,
            pattern: '^[-a-zA-Z0-9_]+$'
        },
        sku: {
            type: 'string',
            maxLength: 200
        },
        short_customer_facing_description: {
            type: 'string'
        },
        short_customer_facing_description_en: {
            type: 'string',
            nullable: true,
            title: 'Short Customer Facing Description [en]'
        },
        short_customer_facing_description_nl: {
            type: 'string',
            nullable: true,
            title: 'Short Customer Facing Description [nl]'
        },
        short_customer_facing_description_fr: {
            type: 'string',
            nullable: true,
            title: 'Short Customer Facing Description [fr]'
        },
        long_customer_facing_description: {
            type: 'string'
        },
        long_customer_facing_description_en: {
            type: 'string',
            nullable: true,
            title: 'Long Customer Facing Description [en]'
        },
        long_customer_facing_description_nl: {
            type: 'string',
            nullable: true,
            title: 'Long Customer Facing Description [nl]'
        },
        long_customer_facing_description_fr: {
            type: 'string',
            nullable: true,
            title: 'Long Customer Facing Description [fr]'
        },
        short_internal_use_description: {
            type: 'string'
        },
        short_internal_use_description_en: {
            type: 'string',
            nullable: true,
            title: 'Short Internal Use Description [en]'
        },
        short_internal_use_description_nl: {
            type: 'string',
            nullable: true,
            title: 'Short Internal Use Description [nl]'
        },
        short_internal_use_description_fr: {
            type: 'string',
            nullable: true,
            title: 'Short Internal Use Description [fr]'
        },
        long_internal_use_description: {
            type: 'string'
        },
        long_internal_use_description_en: {
            type: 'string',
            nullable: true,
            title: 'Long Internal Use Description [en]'
        },
        long_internal_use_description_nl: {
            type: 'string',
            nullable: true,
            title: 'Long Internal Use Description [nl]'
        },
        long_internal_use_description_fr: {
            type: 'string',
            nullable: true,
            title: 'Long Internal Use Description [fr]'
        },
        ingredients: {
            type: 'string'
        },
        ingredients_en: {
            type: 'string',
            nullable: true,
            title: 'Ingredients [en]'
        },
        ingredients_nl: {
            type: 'string',
            nullable: true,
            title: 'Ingredients [nl]'
        },
        ingredients_fr: {
            type: 'string',
            nullable: true,
            title: 'Ingredients [fr]'
        },
        allergens: {
            type: 'string'
        },
        allergens_en: {
            type: 'string',
            nullable: true,
            title: 'Allergens [en]'
        },
        allergens_nl: {
            type: 'string',
            nullable: true,
            title: 'Allergens [nl]'
        },
        allergens_fr: {
            type: 'string',
            nullable: true,
            title: 'Allergens [fr]'
        },
        storage_requirement: {
            type: 'string'
        },
        storage_requirement_en: {
            type: 'string',
            nullable: true,
            title: 'Storage Requirement [en]'
        },
        storage_requirement_nl: {
            type: 'string',
            nullable: true,
            title: 'Storage Requirement [nl]'
        },
        storage_requirement_fr: {
            type: 'string',
            nullable: true,
            title: 'Storage Requirement [fr]'
        },
        nutritional_information: {
            type: 'string'
        },
        nutritional_information_en: {
            type: 'string',
            nullable: true,
            title: 'Nutritional Information [en]'
        },
        nutritional_information_nl: {
            type: 'string',
            nullable: true,
            title: 'Nutritional Information [nl]'
        },
        nutritional_information_fr: {
            type: 'string',
            nullable: true,
            title: 'Nutritional Information [fr]'
        },
        nutritional_claims: {
            type: 'string'
        },
        nutritional_claims_en: {
            type: 'string',
            nullable: true,
            title: 'Nutritional Claims [en]'
        },
        nutritional_claims_nl: {
            type: 'string',
            nullable: true,
            title: 'Nutritional Claims [nl]'
        },
        nutritional_claims_fr: {
            type: 'string',
            nullable: true,
            title: 'Nutritional Claims [fr]'
        },
        health_claims: {
            type: 'string'
        },
        health_claims_en: {
            type: 'string',
            nullable: true,
            title: 'Health Claims [en]'
        },
        health_claims_nl: {
            type: 'string',
            nullable: true,
            title: 'Health Claims [nl]'
        },
        health_claims_fr: {
            type: 'string',
            nullable: true,
            title: 'Health Claims [fr]'
        },
        selling_tax_percentage: {
            type: 'string',
            format: 'decimal',
            pattern: '^-?\\d{0,2}(?:\\.\\d{0,2})?$'
        },
        shop_selling_price_vat_incl_b2b: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        shop_selling_price_vat_incl_b2c: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64'
        },
        ecommerce_selling_price_vat_excl_b2b: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64',
            title: 'E-commerce Selling Price Vat Excl B2b'
        },
        ecommerce_selling_price_vat_excl_b2c: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64',
            title: 'E-commerce Selling Price Vat Excl B2c'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            title: 'Date Created'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        featured_img: {
            type: 'integer',
            nullable: true
        },
        preferred_vendor: {
            type: 'integer',
            nullable: true
        },
        product_type: {
            type: 'integer'
        },
        images: {
            type: 'array',
            items: {
                type: 'integer'
            }
        }
    },
    required: ['allergens', 'created_at', 'ecommerce_selling_price_vat_excl_b2b', 'ecommerce_selling_price_vat_excl_b2c', 'featured_img', 'health_claims', 'id', 'ingredients', 'long_customer_facing_description', 'long_internal_use_description', 'name', 'nutritional_claims', 'nutritional_information', 'product_type', 'selling_tax_percentage', 'shop_selling_price_vat_incl_b2b', 'shop_selling_price_vat_incl_b2c', 'short_customer_facing_description', 'short_internal_use_description', 'sku', 'storage_requirement', 'updated_at']
} as const;

export const ProductTypeSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        batch_attributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BatchAttr'
            }
        },
        name: {
            type: 'string',
            maxLength: 300
        },
        is_enabled: {
            type: 'boolean'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            title: 'Date Created'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        }
    },
    required: ['batch_attributes', 'created_at', 'id', 'name', 'updated_at']
} as const;

export const QuantityWeightUnitEnumSchema = {
    enum: ['kg', 'tons', 'ounces', 'pounds'],
    type: 'string',
    description: `* \`kg\` - kilogram
* \`tons\` - tons
* \`ounces\` - ounces
* \`pounds\` - pounds`
} as const;

export const RegisterAccountSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        password: {
            type: 'string',
            writeOnly: true
        },
        is_superuser: {
            type: 'boolean',
            readOnly: true,
            title: 'Superuser status',
            description: 'Designates that this user has all permissions without explicitly assigning them.'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email Address',
            maxLength: 254
        },
        is_pro_user: {
            type: 'boolean',
            readOnly: true,
            title: 'Pro User Status'
        },
        is_staff: {
            type: 'boolean',
            readOnly: true,
            title: 'Staff Status'
        },
        is_active: {
            type: 'boolean',
            readOnly: true,
            title: 'Active Status'
        },
        is_manager: {
            type: 'boolean',
            readOnly: true,
            title: 'Manager Status'
        },
        date_joined: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        last_login: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        staff_profile: {
            type: 'integer',
            readOnly: true,
            nullable: true
        },
        password2: {
            type: 'string',
            writeOnly: true
        }
    },
    required: ['date_joined', 'email', 'id', 'is_active', 'is_manager', 'is_pro_user', 'is_staff', 'is_superuser', 'last_login', 'password', 'password2', 'staff_profile']
} as const;

export const ResetTokenSchema = {
    type: 'object',
    properties: {
        token: {
            type: 'string'
        }
    },
    required: ['token']
} as const;

export const StaffProfileSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        profile_picture: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Image'
                }
            ],
            readOnly: true
        },
        profile_picture_id: {
            type: 'integer',
            writeOnly: true
        },
        first_name: {
            type: 'string',
            maxLength: 50
        },
        last_name: {
            type: 'string',
            maxLength: 50
        },
        preferred_name: {
            type: 'string',
            maxLength: 50
        },
        preferred_weekly_working_hours: {
            type: 'integer',
            maximum: 32767,
            minimum: 0
        },
        phone_number: {
            type: 'string',
            maxLength: 15
        },
        address: {
            type: 'string'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            nullable: true
        },
        emergency_contact_name: {
            type: 'string',
            maxLength: 50
        },
        emergency_contact_number: {
            type: 'string',
            maxLength: 15
        },
        emergency_contact_relationship: {
            type: 'string',
            maxLength: 50
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        }
    },
    required: ['created_at', 'first_name', 'id', 'last_name', 'profile_picture', 'updated_at']
} as const;

export const StatusSchema = {
    type: 'object',
    properties: {
        status: {
            type: 'string',
            maxLength: 100
        }
    },
    required: ['status']
} as const;

export const Status3b2EnumSchema = {
    enum: ['PENDING', 'IN_PROGRESS', 'COMPLETED'],
    type: 'string',
    description: `* \`PENDING\` - Pending
* \`IN_PROGRESS\` - In Progress
* \`COMPLETED\` - Completed`
} as const;

export const Status86bEnumSchema = {
    enum: ['pending', 'approved', 'declined', 'cancelled'],
    type: 'string',
    description: `* \`pending\` - Pending
* \`approved\` - Approved
* \`declined\` - Declined
* \`cancelled\` - Cancel`
} as const;

export const SupplierSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        company_name: {
            type: 'string'
        },
        contact_person: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            format: 'email',
            maxLength: 254
        },
        phone: {
            type: 'string',
            nullable: true
        },
        address: {
            type: 'string'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            title: 'Date Created'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        logo: {
            type: 'integer',
            nullable: true
        }
    },
    required: ['address', 'company_name', 'created_at', 'email', 'id', 'updated_at']
} as const;

export const TaskSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        title: {
            type: 'string',
            maxLength: 255
        },
        description: {
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/Status3b2Enum'
        },
        priority: {
            '$ref': '#/components/schemas/PriorityEnum'
        },
        start_time: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        end_time: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        assignees_ids: {
            type: 'array',
            items: {
                type: 'integer',
                writeOnly: true
            },
            writeOnly: true
        },
        assignees: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Account'
            },
            readOnly: true
        }
    },
    required: ['assignees', 'assignees_ids', 'created_at', 'id', 'title', 'updated_at']
} as const;

export const TimeEntrySchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        account: {
            type: 'integer',
            readOnly: true
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        event_type: {
            '$ref': '#/components/schemas/EventTypeEnum'
        }
    },
    required: ['account', 'event_type', 'id', 'timestamp']
} as const;

export const TokenObtainPairSchema = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            writeOnly: true
        },
        password: {
            type: 'string',
            writeOnly: true
        },
        access: {
            type: 'string',
            readOnly: true
        },
        refresh: {
            type: 'string',
            readOnly: true
        }
    },
    required: ['access', 'email', 'password', 'refresh']
} as const;

export const TokenObtainPairResponseSchema = {
    type: 'object',
    properties: {
        access: {
            type: 'string'
        },
        refresh: {
            type: 'string'
        }
    },
    required: ['access', 'refresh']
} as const;

export const TokenRefreshSchema = {
    type: 'object',
    properties: {
        access: {
            type: 'string',
            readOnly: true
        },
        refresh: {
            type: 'string'
        }
    },
    required: ['access', 'refresh']
} as const;

export const TokenRefreshResponseSchema = {
    type: 'object',
    properties: {
        access: {
            type: 'string'
        },
        refresh: {
            type: 'string'
        }
    },
    required: ['access', 'refresh']
} as const;

export const TokenVerifySchema = {
    type: 'object',
    properties: {
        token: {
            type: 'string',
            writeOnly: true
        }
    },
    required: ['token']
} as const;

export const UpdateAccountSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        is_superuser: {
            type: 'boolean',
            readOnly: true,
            title: 'Superuser status',
            description: 'Designates that this user has all permissions without explicitly assigning them.'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email Address',
            maxLength: 254
        },
        is_pro_user: {
            type: 'boolean',
            title: 'Pro User Status'
        },
        is_staff: {
            type: 'boolean',
            title: 'Staff Status'
        },
        is_active: {
            type: 'boolean',
            title: 'Active Status'
        },
        is_manager: {
            type: 'boolean',
            title: 'Manager Status'
        },
        date_joined: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        last_login: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        staff_profile: {
            type: 'integer',
            readOnly: true,
            nullable: true
        },
        manager_ids: {
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        managers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Manager'
            },
            readOnly: true
        }
    },
    required: ['date_joined', 'email', 'id', 'is_superuser', 'last_login', 'managers', 'staff_profile']
} as const;

export const WorkScheduleSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        day_of_week: {
            allOf: [
                {
                    '$ref': '#/components/schemas/DayOfWeekEnum'
                }
            ],
            minimum: -2147483648,
            maximum: 2147483647
        },
        department: {
            '$ref': '#/components/schemas/DepartmentEnum'
        },
        start_time: {
            type: 'string',
            format: 'time'
        },
        end_time: {
            type: 'string',
            format: 'time'
        },
        account_id: {
            type: 'integer'
        }
    },
    required: ['account_id', 'day_of_week', 'department', 'end_time', 'id', 'start_time']
} as const;

export const WorkScheduleUpdateSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        day_of_week: {
            allOf: [
                {
                    '$ref': '#/components/schemas/DayOfWeekEnum'
                }
            ],
            minimum: -2147483648,
            maximum: 2147483647
        },
        department: {
            '$ref': '#/components/schemas/DepartmentEnum'
        },
        start_time: {
            type: 'string',
            format: 'time'
        },
        end_time: {
            type: 'string',
            format: 'time'
        },
        account_id: {
            type: 'integer',
            readOnly: true
        }
    },
    required: ['account_id', 'day_of_week', 'department', 'end_time', 'id', 'start_time']
} as const;